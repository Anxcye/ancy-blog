version: '3.8'
services:
  admin-backend:
    build:
      context: .
      dockerfile: Dockerfile-admin-backend
    container_name: ancy-admin-backend
    restart: on-failure
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - TZ=Asia/Shanghai
      - ALIYUN_ACCESS_KEY_ID=${ALIYUN_ACCESS_KEY_ID}
      - ALIYUN_ENDPOINT=${ALIYUN_ENDPOINT}
      - ALIYUN_BUCKET_NAME=${ALIYUN_BUCKET_NAME}
      - ALIYUN_ACCESS_KEY_SECRET=${ALIYUN_ACCESS_KEY_SECRET}
      - MYSQL_ADDRESS=${MYSQL_ADDRESS}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DRIVER_CLASS_NAME=${MYSQL_DRIVER_CLASS_NAME}
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    networks:
      - ancy-network
    depends_on:
      - ancy-mysql
      - ancy-redis

  blog-backend:
    build:
      context: .
      dockerfile: Dockerfile-blog-backend
    container_name: ancy-blog-backend
    restart: on-failure
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - TZ=Asia/Shanghai
      - ALIYUN_ACCESS_KEY_ID=${ALIYUN_ACCESS_KEY_ID}
      - ALIYUN_ENDPOINT=${ALIYUN_ENDPOINT}
      - ALIYUN_BUCKET_NAME=${ALIYUN_BUCKET_NAME}
      - ALIYUN_ACCESS_KEY_SECRET=${ALIYUN_ACCESS_KEY_SECRET}
      - MYSQL_ADDRESS=${MYSQL_ADDRESS}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DRIVER_CLASS_NAME=${MYSQL_DRIVER_CLASS_NAME}
      - REDIS_ADDRESS=${REDIS_ADDRESS}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    networks:
      - ancy-network
    depends_on:
      - ancy-mysql
      - ancy-redis

  nginx:
    image: nginx:1.25.2
    container_name: ancy-nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/access.log:/var/log/nginx/access.log
      - ./nginx/error.log:/var/log/nginx/error.log
      - ./dists/blog-frontend:/usr/share/nginx/html/blog
      - ./dists/admin-frontend:/usr/share/nginx/html/admin
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/var:/var/lib/letsencrypt
      - ./certbot/webroot:/var/www/certbot
    environment:
      - BLOG_SERVER_NAME=${BLOG_SERVER_NAME}
      - ADMIN_SERVER_NAME=${ADMIN_SERVER_NAME}
    depends_on:
      admin-backend:
        condition: service_started
      blog-backend:
        condition: service_started
      certbot:
        condition: service_completed_successfully
    networks:
      - ancy-network

  certbot:
    image: certbot/certbot:v2.11.0
    container_name: certbot
    ports:
      - 80:80
    volumes:
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/var:/var/lib/letsencrypt
      - ./certbot/webroot:/var/www/certbot
    command: certonly --standalone --non-interactive --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${BLOG_SERVER_NAME} -d ${ADMIN_SERVER_NAME}
    networks:
      - ancy-network

  certbot-renew:
    image: certbot/certbot
    container_name: certbot-renew
    volumes:
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/var:/var/lib/letsencrypt
      - ./certbot/webroot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; sleep 24h; while :; do certbot renew --webroot --webroot-path=/var/www/certbot; sleep 24h; done;'"
    depends_on:
      - nginx
    networks:
      - ancy-network

  ancy-mysql:
    image: mysql:8.0.31
    container_name: ancy-mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=ancy_blog
      - TZ=Asia/Shanghai
    volumes:
      - ancy-mysql-conf:/etc/mysql/conf.d
      - ancy-mysql-data:/var/lib/mysql
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - ancy-network

  ancy-redis:
    image: redis:7.0.12
    container_name: ancy-redis
    restart: always
    networks:
      - ancy-network

networks:
  ancy-network:
    driver: bridge
    external: false

volumes:
  ancy-mysql-data:
  ancy-mysql-conf:
